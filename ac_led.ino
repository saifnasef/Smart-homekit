
#include "HomeSpan.h" 
#include "DEV_LED.h"  
#include <IRremoteESP8266.h>
#include <IRsend.h>


uint16_t powerOn[] = {4366, 4418,  546, 1604,  546, 528,  546, 1606,  546, 1604,  546, 530,  542, 530,
  546, 1604,  544, 528,  544, 530,  546, 1604,  544, 530,  546, 526,  546, 1606,  544, 1606,  546, 528,
    544, 1606,  546, 528,  544, 1604,  546, 530,  544, 1604,  546, 1604,  546, 1608,  542, 1606,  546,
     1604,  544, 1606,  544, 528,  546, 1604,  546, 528,  546, 530,  546, 530,  544, 530,  546, 530,
       544, 1604,  546, 1604,  546, 528,  548, 528,  544, 528,  544, 532,  544, 528,  544, 530,  546,
        530,  544, 530,  544, 1604,  546, 1604,  544, 1608,  544, 1604,  544, 1604,  546, 1604,  546,
         5200,  4366, 4418,  544, 1604,  544, 530,  546, 1604,  546, 1604,  546, 530,  544, 528,  546,
          1604,  546, 530,  546, 530,  542, 1606,  544, 528,  544, 530,  546, 1604,  546, 1604,  544,
           528,  546, 1604,  546, 528,  544, 1604,  544, 530,  546, 1604,  546, 1604,  546, 1606,  544,
            1606,  544, 1604,  546, 1604,  546, 528,  548, 1604,  544, 530,  546, 530,  546, 528,  544,
             530,  546, 528,  544, 1604,  548, 1604,  544, 528,  544, 530,  544, 528,  546, 530,  544,
              528,  546, 530,  544, 530,  546, 530,  546, 1604,  546, 1604,  544, 1604,  548, 1604,  546, 1604,  546, 1604,  546}; //ir signal code to turn ac on on 25 C

uint16_t poweroff[] = {4408, 4394,  546, 1602,  546, 530,  544, 1606,  546, 1604,  544, 528,  548, 526,
  546, 1604,  544, 530,  546, 528,  546, 1606,  542, 530,  546, 528,  546, 1604,  546, 1606,  544, 528,
    546, 1602,  548, 528,  544, 1606,  544, 1606,  546, 1604,  546, 1604,  544, 528,  546, 1604,  546, 1604,
      544, 1608,  542, 530,  546, 530,  546, 526,  546, 530,  544, 1608,  544, 528,  544, 530,  546, 1604,
        544, 1604,  546, 1606,  546, 528,  544, 530,  546, 528,  546, 528,  548, 528,  546, 530,  544, 528,
          544, 532,  544, 1604,  546, 1604,  546, 1606,  544, 1606,  544, 1604,  546, 5200,  4366, 4418,
            546, 1604,  544, 530,  546, 1604,  546, 1604,  544, 528,  546, 528,  546, 1604,  546, 530,
              544, 528,  546, 1606,  546, 526,  546, 530,  546, 1604,  546, 1604,  546, 530,  544, 1606,
                544, 528,  546, 1604,  546, 1602,  546, 1604,  546, 1604,  546, 530,  544, 1606,  544, 1604,
                  546, 1604,  546, 528,  546, 528,  546, 530,  546, 532,  542, 1606,  546, 528,  544, 532,
                    544, 1604,  546, 1602,  548, 1602,  546, 528,  546, 530,  546, 528,  546, 530,  544, 530,
                      544, 530,  546, 528,  546, 530,  546, 1604,  544, 1604,  546, 1604,  546, 1606,  544, 1606,  546}; //ir signal code to turn off ac

IRsend irsend(5); 
int pwr = 0;


void sendPowerOn() {
  irsend.sendRaw(powerOn, sizeof(powerOn) / sizeof(powerOn[0]), 38);
  Serial.println("sent power on");
}

void sendPowerOff() {
  irsend.sendRaw(poweroff, sizeof(poweroff) / sizeof(poweroff[0]), 38);
  Serial.println("sent power off");
}


void setup() {

  irsend.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else 
  Serial.begin(115200, SERIAL_8N1);
#endif  
  
  homeSpan.begin(Category::Bridges,"HomeSpan Bridge");
  
  new SpanAccessory();                            
    new Service::AccessoryInformation();
      new Characteristic::Identify();            
 
  new SpanAccessory();                           
    new Service::AccessoryInformation();
      new Characteristic::Identify();            
      new Characteristic::Name("Bed LED");     
    new DEV_LED(18);

  new SpanAccessory();                            
    new Service::AccessoryInformation();    
      new Characteristic::Identify();               
      new Characteristic::Name("AC");  
    new DEV_DimmableLED(4);

} 

void loop(){
  
  homeSpan.poll();
  if (change == 1) {
    if (pwr == 1) {
      sendPowerOff();
      pwr = 0;
    }
    else {
      sendPowerOn();
      pwr = 1;
    }
    change = 0;
  }
}
